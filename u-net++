import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import random
from matplotlib import pyplot as plt
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms
from PIL import Image, ImageDraw
import os
import json

# 定义 U-Net++ 网络架构
class UNetPlusPlus(nn.Module):
    def __init__(self):
        super(UNetPlusPlus, self).__init__()

        # 编码
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)

        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)

        # 解码
        self.up1 = nn.ConvTranspose2d(128, 128, kernel_size=2, stride=2)
        self.conv5 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.conv6 = nn.Conv2d(128, 128, kernel_size=3, padding=1)

        self.up2 = nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2)
        self.conv7 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.conv8 = nn.Conv2d(64, 64, kernel_size=3, padding=1)

        self.conv9 = nn.Conv2d(64, 1, kernel_size=1)

    def forward(self, x):
        # 编码
        x1 = self.conv1(x)
        x1 = nn.ReLU()(x1)
        x1 = self.conv2(x1)
        x1 = nn.ReLU()(x1)
        x1_pool = self.pool1(x1)

        x2 = self.conv3(x1_pool)
        x2 = nn.ReLU()(x2)
        x2 = self.conv4(x2)
        x2 = nn.ReLU()(x2)
        x2_pool = self.pool2(x2)

        # 解码
        x3 = self.up1(x2_pool)
        x3 = self.conv5(x3)
        x3 = nn.ReLU()(x3)
        x3 = self.conv6(x3)
        x3 = nn.ReLU()(x3)

        x4 = self.up2(x3)
        x4 = self.conv7(x4)
        x4 = nn.ReLU()(x4)
        x4 = self.conv8(x4)
        x4 = nn.ReLU()(x4)

        out = self.conv9(x4)
        out = nn.Sigmoid()(out)
        return out

# 数据集定义
class CustomDataset(Dataset):
    def __init__(self, data_dir, transform=None):
        self.data_dir = data_dir
        self.transform = transform
        self.image_files = [f for f in os.listdir(data_dir) if f.endswith('.png')]

    def __len__(self):
        return len(self.image_files)

    def __getitem__(self, idx):
        image_name = self.image_files[idx]
        image_path = os.path.join(self.data_dir, image_name)
        image = Image.open(image_path).convert('RGB')
        if self.transform:
            image = self.transform(image)

        mask_name = image_name
        mask_path = os.path.join(self.data_dir, mask_name)
        mask = Image.open(mask_path).convert('L')
        if self.transform:
            mask = self.transform(mask)

        return image, mask

# 数据集准备
data_transform = transforms.Compose([
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.ColorJitter(0.1, 0.1, 0.1, 0.1),
    transforms.Resize((216, 384)),
    transforms.ToTensor(),
])

# 数据集加载
data_dir = r'E:/桌面/new/SegmentationClass'
dataset = CustomDataset(data_dir, transform=data_transform)

# 创建数据加载
train_loader = DataLoader(dataset, batch_size=4, shuffle=True)

# 网络训练
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = UNetPlusPlus().to(device)
criterion = nn.BCELoss()
optimizer = optim.Adam(model.parameters(), lr=0.00003)

for epoch in range(100):
    model.train()
    total_loss = 0.0
    num_batches = 0

    for images, ground_truth_masks in train_loader:
        images = images.to(device)
        ground_truth_masks = ground_truth_masks.to(device).float()
        masks = model(images)
        masks = masks.float()

        # 计算损失函数
        loss = criterion(masks, ground_truth_masks)

        # 反向传播和优化
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        total_loss += loss.item()
        num_batches += 1

        # 将掩码图像转为numpy数组，并去掉batch维度
        masks_np = (masks > 0.5).float().squeeze(1).cpu().numpy()
        ground_truth_masks_np = ground_truth_masks.squeeze(1).cpu().numpy()

        # 显示图像和掩码图
        plt.figure(figsize=(15, 5))
        for i in range(images.shape[0]):
            plt.subplot(2, images.shape[0], i + 1)
            plt.imshow(images[i].permute(1, 2, 0).cpu().numpy())
            plt.title('Image')
            plt.axis('off')

            plt.subplot(2, images.shape[0], images.shape[0] + i + 1)
            plt.imshow(ground_truth_masks_np[i], cmap='gray')
            plt.title('Predicted Mask')
            plt.axis('off')

        plt.show()

    # 打印每个epoch的平均损失
    avg_loss = total_loss / num_batches
    print(f"Epoch [{epoch + 1}/100], Average Loss: {avg_loss:.4f}")

# 保存模型
torch.save(model.state_dict(), 'unet_weights.pth')

